-- SQL JOIN PART 2
USE sakila;
-- 1. List the number of films per category.
SELECT 
    c.name AS category_name,
    COUNT(DISTINCT f.film_id) AS film_number
FROM
    category c
        JOIN
    film_category f ON f.category_id = c.category_id
GROUP BY category_name
ORDER BY film_number DESC;

-- 2. Retrieve the store ID, city, and country for each store.
SELECT 
    s.store_id, ci.city, co.country
FROM
    store s
        JOIN
    address ad ON s.address_id = ad.address_id
        JOIN
    city ci ON ad.city_id = ci.city_id
        JOIN
    country co ON co.country_id = ci.country_id;

-- 3.  Calculate the total revenue generated by each store in dollars.
SELECT 
    s.store_id, SUM(p.amount) AS total_revenue
FROM
    store s
        JOIN
    payment p ON s.manager_staff_id = p.staff_id
GROUP BY s.store_id;

-- 4.  Determine the average running time of films for each category.
SELECT 
    c.name, AVG(f.length) AS average_running_time
FROM
    category c
        JOIN
    film_category fc ON c.category_id = fc.category_id
        JOIN
    film f ON f.film_id = fc.film_id
GROUP BY c.category_id;

-- **Bonus**:

SELECT 
    c.name, AVG(f.length) AS average_running_time
FROM
    category c
        JOIN
    film_category fc ON c.category_id = fc.category_id
        JOIN
    film f ON f.film_id = fc.film_id
GROUP BY c.category_id
ORDER BY average_running_time DESC
LIMIT 1;

-- 6.  Display the top 10 most frequently rented movies in descending order.
SELECT 
    f.title, COUNT(f.title) AS rent_times
FROM
    film f
        JOIN
    inventory i ON f.film_id = i.film_id
        JOIN
    rental r ON r.inventory_id = i.inventory_id
GROUP BY f.title
ORDER BY rent_times DESC
LIMIT 10;

-- 7. Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT 
    f.title, COUNT(i.inventory_id) AS inventory
FROM
    film f
        JOIN
    inventory i ON f.film_id = i.film_id
WHERE
    i.store_id = 1
        AND f.title = 'Academy Dinosaur'
GROUP BY f.title;
-- Since there are 4 copies in inventory, "Academy Dinosaur" can be rented from Store 1.

-- 8. Provide a list of all distinct film titles, along with their availability status in the inventory. Include a column indicating whether each title is 'Available' or 'NOT available.' Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."
SELECT DISTINCT
    f.title,
    COUNT(i.inventory_id) AS inventory,
    CASE
        WHEN COUNT(i.inventory_id) = 0 THEN 'Not Available'
        ELSE 'Available'
    END AS rent_status
FROM
    film f
        LEFT JOIN
    inventory i ON f.film_id = i.film_id
GROUP BY f.title;